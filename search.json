[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BM923 Synthetic Biology Workshop",
    "section": "",
    "text": "Preface\nThis is a Quarto book, written to accompany the BM923 Bioprocessing workshop on Synthetic Biology. This book will go through the 4 worked examples mentioned in the workshop:",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how-to-use-this-book",
    "href": "index.html#how-to-use-this-book",
    "title": "BM923 Synthetic Biology Workshop",
    "section": "How to use this book:",
    "text": "How to use this book:\nYou can navigate this book using the links provided in the sidebar at the left, or by using the arrows at the bottom right of each page to progress.\nYou can work through the four examples in any order.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#requirements-for-this-workshop",
    "href": "index.html#requirements-for-this-workshop",
    "title": "BM923 Synthetic Biology Workshop",
    "section": "Requirements for this workshop:",
    "text": "Requirements for this workshop:\nYou will need to sign up for a free Benchling account for this workshop.\nYou should be able to use most internet web browsers to complete this workshop, but please note that it was written and tested using Google Chrome. If you encounter issues with using another browser, consider switching to a different browser and please also inform Dr. Feeney of the issue (with a detailed description of what went wrong).",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#any-issues",
    "href": "index.html#any-issues",
    "title": "BM923 Synthetic Biology Workshop",
    "section": "Any issues?",
    "text": "Any issues?\nThis Quarto book is hosted in GitHub; if you encounter any issues (typos, broken links, technical issues), or have any suggestions for improving this workshop, please kindly raise a GitHub issue or speak with Dr. Feeney directly.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "adpA.html",
    "href": "adpA.html",
    "title": "1  Cloning AdpA",
    "section": "",
    "text": "1.1 Cloning adpA (antibiotic biosynthesis regulator) for overexpression in Streptomyces spectabilis (Restriction Enzyme-based cloning)\nWe wish to clone a regulator of antibiotic biosynthesis (adpA) under control of an inducible promoter (tcpp), in order to overexpress it to different levels and determine whether we can create strains that produce higher titers of antibiotics. This document outlines the steps that are necessary to construct the desired vector: you should follow along in your Benchling account.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Cloning AdpA</span>"
    ]
  },
  {
    "objectID": "adpA.html#cloning-adpa-antibiotic-biosynthesis-regulator-for-overexpression-in-streptomyces-spectabilis-restriction-enzyme-based-cloning",
    "href": "adpA.html#cloning-adpa-antibiotic-biosynthesis-regulator-for-overexpression-in-streptomyces-spectabilis-restriction-enzyme-based-cloning",
    "title": "1  Cloning AdpA",
    "section": "",
    "text": "1.1.1 Identify the Streptomyces spectabilis adpA gene\nWe first need to identify the adpA gene sequence from S. spectabilis, the organism that we are working with.\nWe can do this using BLAST. An appropriate query in this case would be the adpA gene sequence from a better-characterised Streptomyces species, such as Streptomyces coelicolor A3(2).\nWe can retrieve this sequence from a database, such as StrepDB1 - other databases (such as NCBI) would work just as well.\n\nNavigate to StrepDB and search for the adpA gene (Figure 1.1). (Enter “adpA” in the search bar at the top left and click “Search Genes”).\n\n\n\n\n\n\n\nFigure 1.1: The StrepDB database\n\n\n\n\nA pop-up should appear (“SCO2792 araC-family transcriptional regulator” - click on that link to be redirected to the page for the adpA gene - Figure 1.2)\n\n\n\n\n\n\n\nFigure 1.2: The page for adpA in StrepDB\n\n\n\n\nRead through the page to check that you have the correct gene, then click the button “Nt seq” to retrieve the adpA nucleotide sequence. (Keep 0 for the amount of flanking region - you only want the sequence of the gene itself.)\n\nSelect the entire sequence of the gene (Figure 1.3) and copy it (either using Ctrl+C or right-click and select “Copy” from the menu).\n\n\n\n\n\n\nFigure 1.3: The adpA nucleotide sequence from StrepDB\n\n\n\n\nNavigate to the NCBI BLAST page and click on “Nucleotide BLAST”.\nOn the BLASTn page, paste the sequence you acquired from StrepDB into the “Query” sequence box.\n\nUnder “Choose Search Set”, keep the database as “Standard databases (nr etc)” and specify the organism (if you begin typing the name of your species (Streptomyces spectabilis), a menu should automatically appear with suggested search terms. We want to select “Streptomyces spectabilis (taxid:68270)) (Figure 1.4).\n\n\n\n\n\n\nFigure 1.4: Using BLAST to find the adpA homolog in Streptomyces spectabilis\n\n\n\nClick the blue “BLAST” button and wait for your results.\n\nExamine the alignments. For the ATCC 27465 strain (the one we are working with), click on the “Genbank” link next to the range numbers (Figure 1.5).\n\n\n\n\n\n\n\nFigure 1.5: BLAST hit results - with the link to the Genbank range for this hit circled in red.\n\n\n\n\nCheck that this has taken you to the correct sequence (Streptomyces spectabilis sequence, product annotated as a helix-turn-helix domain-containing protein) and click the link to view the “FASTA” formatted sequence (Figure 1.6). Copy this sequence (Figure 1.7).\n\n\n\n\n\n\n\nFigure 1.6: The nucleotide sequence for the adpA homolog from Streptomyces spectabilis, with the link to the FASTA-formatted sequence highlighted in red\n\n\n\n\n\n\n\n\n\nFigure 1.7: The FASTA sequence of the Streptomyces spectabilis adpA gene highlighted\n\n\n\n\n\n1.1.2 Import Sequences into Benchling\n\nIn Benchling, create a new Project to organise your work. Click the + icon and select “Project” (Figure 1.8). Give your project an informative name and description (this will help you in the future, especially if you have multiple projects or complex work schemes.)\n\n\n\n\n\n\n\nFigure 1.8: Starting a new Benchling project\n\n\n\n\nIn your new project, click the + icon again. This time, add a new DNA/RNA sequence (Figure 1.9).\n\n\n\n\n\n\n\nFigure 1.9: Adding a new DNA/RNA sequence in Benchling\n\n\n\nGive the molecule an informative name, specify the type (DNA),topology (Linear), and project folder (your new project folder). Paste the sequence you obtained from NCBI into “Bases” and click “Create” (Figure 1.10).\n\n\n\n\n\n\nFigure 1.10: Create a DNA/RNA sequence in Benchling\n\n\n\n\nNow, to check that your sequence is correct, you should perform the following checks:\n\nA. Check the translation of this sequence - select the entire sequence, click “Create” &gt; “translation” &gt; “Forward” (Figure 1.11).\n\n\n\n\n\n\nFigure 1.11: Adding a translation to your adpA sequence in Benchling\n\n\n\nGive the translation a name (e.g., AdpA) and click “Save). The amino acid sequence should now appear under the nucleotide sequence (Figure 1.12). Check that there are no premature stop codons.\n\n\n\n\n\n\nFigure 1.12: The adpA sequence with added translation\n\n\n\nB. Compare the sequence against the Streptomyces coelicolor genome using BLAST (ensure that this is in fact the adpA homolog).\n\nNext, you will need to import the sequence of the vector we are using (pMS17).\n\nClick the + icon again &gt; DNA/RNA sequence &gt; Import DNA/RNA sequences (Figure 1.13).\n\n\n\n\n\n\nFigure 1.13: Importing a DNA/RNA sequence in Benchling\n\n\n\nSearch for pMS17 in the addgene database (Figure 1.14).\n\n\n\n\n\n\nFigure 1.14: Searching for pMS17 in the addgene website\n\n\n\nClick on the record for pMS17 and copy the URL for this page (https://www.addgene.org/127088/).\nIn Benchling, under “Import from database”, copy this URL into the search bar and click “Search” (Figure 1.15)\n\n\n\n\n\n\nFigure 1.15: Searching for pMS17 using its addgene URL\n\n\n\nThis should bring up the correct record for pMS17, click “Import” (Figure 1.16).\n\n\n\n\n\n\nFigure 1.16: Importing pMS17 into Benchling\n\n\n\n\n\n1.1.3 Identify the restriction enzymes we can use for cloning adpA into pMS17\n\nWe need to clone downstream of the tet operator (so that the gene is expressed under control of this promoter). You can see the multiple cloning site (MCS) here by clicking on “Plasmid” and zooming in to look at the MCS (Figure 1.17)\n\n\n\n\n\n\n\nFigure 1.17: The pMS17 multiple cloning site\n\n\n\nIn this case, XbaI, EcoRV, NsiI, or KpnI look like possible choices.\nConfirm that these enzymes each only cut the vector once (click on the scissors icon in the right-hand pane and start typing an enzyme name - as shown in Figure 1.18, for XbaI, which only cuts once.)\n\n\n\n\n\n\nFigure 1.18: Checking the restriction enzyme cutting patterns in pMS17\n\n\n\n\nCheck whether any of these enzymes cut the adpA sequence (if they do, we would not be able to use them for cloning in this way.)\n\nIn the adpA sequence, again click on the scissors icon on the right, and check each of the enzymes - as you see in Figure 1.19, KpnI does cut the sequence, and so must be avoided.\n\n\n\n\n\n\nFigure 1.19: KpnI restriction sites in the adpA sequence\n\n\n\nCheck whether the enzymes are compatible with one another using the NEB double digest checker. As you see in Figure 1.20, XbaI and EcoRV don’t have 100% activity in any of the NEB buffers (if you were using enzymes from another company, you would use their catalog/enzyme materials instead.) Similarly, XbaI and NsiI don’t have full activity in any of the buffers. However, EcoRV and NsiI have full activity in buffer r3.1 - so we will choose these two enzymes. (Note from the map of the NCS, EcoRV should be used for the forward primer and NsiI for the reverse primer.)\n\n\n\n\n\n\nFigure 1.20: NEB double digest selector results for XbaI and EcoRV\n\n\n\n\n\n1.1.4 Design primers to amplify adpA with the desired restriction enzyme sites\n\nSelect the first 20-25 bases of the adpA sequence to create your forward primer (if possible, end on a C or a G nucleotide). Click create &gt; Primer &gt; Forward (Figure 1.21).\n\n\n\n\n\n\n\nFigure 1.21: Creating the adpA forward primer\n\n\n\nIn the primer design window that pops up, use the menu to select EcoRV to look up the cut site (GATATC) (Figure 1.22)\n\n\n\n\n\n\nFigure 1.22: Adding the EcoRV cut site to the adpA forward primer\n\n\n\nCopy and paste the GATATC EcoRV cut site at the beginning (5’ end) of your primer. You will also need to add some bases upstream of the EcoRV sequence (most restriciton enzymes do not cut well at the very end of a DNA fragment - you can look up the precise amount of overhang needed at NEB’s “Cleavage Close to the end of DNA Fragments” guide). (Note that the sequence you add here does not matter, as it will be cleaved away and not included in part of your final product - though of course it is best to avoid duplicating the restriction enzyme site itself.)\nBe sure to adjust the overhang to match the number of bases you have added (in this case, 14 - Figure 1.23)\n\n\n\n\n\n\nFigure 1.23: Adding an overhang to the adpA forward primer\n\n\n\nGive the primer an informative name and click “Save Primer”, being sure to save it in the correct Project folder. It should now appear in your adpA sequence, as shown in Figure 1.24.\n\n\n\n\n\n\nFigure 1.24: The adpA forward primer\n\n\n\n\nRepeat the above process to create your reverse primer, being sure to specify “Reverse” primer when you create it, and to choose the correct enzyme (NsiI)\nLink the two primers and perform an in silico PCR.\n\nThis is necessary so that we can use the two primers to perform in silico PCR with them.\nClick on the forward primer, then press the “Shift” key and then click on the reverse primer. This should highlight the primers and the sequence between them (Figure 1.25).\n\n\n\n\n\n\nFigure 1.25: Linking the adpA primers to create an in silico PCR product\n\n\n\nRight click on the highlighted sequence, and then from the pop-up menu, select “Link primers”\nThis should give you a pop-up menu, showing that the two primers are linked. Click on “Create PCR Product”.\nIn the pop-up menu, be sure that “Use primer bases instead of sequence (includes overhang if any)” is selected, and you will probably also wish to copy over “Annotations, translations, and primers” to preserve the translation that you entered earlier (Figure 1.26). Click “Copy”, and be sure to save the copy in the correct Project folder.\n\n\n\n\n\n\nFigure 1.26: Creating the adpA in silico PCR product\n\n\n\n\n\n1.1.5 Perform in silico restriction digests\n\nDigest the insert sequence\n\nIn the adpA sequence, click the scissors icon, and then select the two enzymes that you wish to use to cut this sequence (EcoRV and NsiI) (Figure 1.27)\n\n\n\n\n\n\nFigure 1.27: Digesting the in silico PCR product with EcoRV and NsiI\n\n\n\nClick “Run digest”. This should generate 3 fragments (the tiny end overhangs, which are cut away, and the 1319 nucleotide fragment which contains the adpA sequence that we are cloning into pMS17. (Figure 1.28))\n\n\n\n\n\n\nFigure 1.28: Products generated from the in silico restriction digest\n\n\n\n\nSimilarly, cut the pMS17 vector with EcoRV and NsiI - this should generate two fragments (a small 13 nt portion of the MCS, which is being cut away, and the larger (5876 nt) part of the vector, which we are cloning into - Figure 1.29).\n\n\n\n\n\n\n\nFigure 1.29: Products from the in silico digest of pMS17 with EcoRV and NsiI\n\n\n\n\n\n1.1.6 Ligate the DNA fragments together\nAt the bottom right hand corner of the screen, click “Assembly” and then “Assembly Wizard”. From the pop-up menu, select “Digest and Ligate” as your Assembly Strategy, and then click “Start” (Figure 1.30). This should open a preview of your untitled assembly at the bottom of the screen (Figure 1.31)\n\n\n\n\n\n\nFigure 1.30: Choosing an Assembly Strategy in the Benchling Assembly Wizard\n\n\n\n\n\n\n\n\n\nFigure 1.31: Preview of an untitled assembly in Benchling\n\n\n\nEnsure that you have selected the correct (larger) fragment of pMS17 that you wish to use for this cloning project. Click on “Backbone” in this preview, and then “Set from selection”.\npMS17 (5.9kb, cut by NsiI and EcoRV) should now appear in your assembly as the backbone (Figure 1.32).\n\n\n\n\n\n\nFigure 1.32: pMS17 selected as the backbone of the assembly\n\n\n\nSimilarly, select and set your NsiI-EcoRV digested adpA fragment as the insert (Figure 1.33)\n\n\n\n\n\n\nFigure 1.33: adpA fragment selected as the insert in the assembly\n\n\n\nClick “Done”. Then give your assembly a name (e.g. pMS17-adpA), and ensure that you are saving it in the correct folder.\nThis should generate a plasmid map of your pMS17-adpA construct (Figure 1.34). Check to make sure your adpA sequence is present in the plasmid and in the correct orientation with regards to the tet promoter (annotated by addgene as the tet operator).\n\n\n\n\n\n\nFigure 1.34: The new pMS17-adpA plasmid map",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Cloning AdpA</span>"
    ]
  },
  {
    "objectID": "adpA.html#footnotes",
    "href": "adpA.html#footnotes",
    "title": "1  Cloning AdpA",
    "section": "",
    "text": "a specialised database for Streptomyces genome information↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Cloning AdpA</span>"
    ]
  },
  {
    "objectID": "pET.html",
    "href": "pET.html",
    "title": "2  PET hydrolase homolog cloning",
    "section": "",
    "text": "2.1 Cloning PET hydrolase homologs for heterologous expression in Pseudomonas (Gibson assembly)\nIn this example we will clone the pET hydrolase from Ideonella sakaiensis into an expression vector (pMMPc) with a strong constitutive promoter for expression in Pseudomonas putida, using Gibson assembly.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PET hydrolase homolog cloning</span>"
    ]
  },
  {
    "objectID": "pET.html#cloning-pet-hydrolase-homologs-for-heterologous-expression-in-pseudomonas-gibson-assembly",
    "href": "pET.html#cloning-pet-hydrolase-homologs-for-heterologous-expression-in-pseudomonas-gibson-assembly",
    "title": "2  PET hydrolase homolog cloning",
    "section": "",
    "text": "2.1.1 Rationale for design choices\nStrain choice: Pseudomonas putida is tolerant to solvents, has a robust metabolism and capacity to withstand stresses, and has been used as a chassis organism for industrial biotechnology purposes previously, making it an ideal choice for our PET hydrolase expression system. (c.f. Weimer et al 2020 - https://doi.org/10.1007/s00253-020-10811-9)\nVector choice: Need a plasmid that will replicate in Pseudomonas, with a strong constitutive promoter. Xu et al (2013) created some appropriate vectors, c.f. doi: 10.1128/AEM.03746-12 - we will choose pMMPc (Genbank accession KC544266).\nChoice of PET hydrolase: Ideonella sakaiensis has been shown to degrade PET (and can use it as a sole carbon/energy source) doi:10.1126/science.aad6359. We will begin by cloning the well-characterized PET hydrolase from this organism (further optimisation of the hydrolase properties using gene engineering, or exploration of potentially more active/useful homologs may be necessary in the future).\n\n\n2.1.2 Obtaining the sequence for the PET hydrolase\n\nSearch the UniProt database for “PET hydrolase” (Figure 2.1).\n\n\n\n\n\n\n\nFigure 2.1: Searching the UniProt database\n\n\n\n\nClick on the search result that you want (in our case, the PET hydrolase from Ideonella sakaiensis/Piscinibacter sakaiensis). This should take you to the page for this protein, with information about its function, etc (Figure 2.2).\n\n\n\n\n\n\n\nFigure 2.2: The I. sakaiensis PET Hydrolase entry in UniProt\n\n\n\n\nThe uniprot accession # for this PET hydrolase is A0A0K8P6T7, which you will need to import the data into Benchling.\n\nIn Benchling, you may wish to start a new project (You can do this by clicking on the + icon in the left-hand toolbar, selecting “Project”, and then giving your new project an informative name and description, then clicking “Create project”.)\nTo import the sequence of the PET hydrolase, click on the + icon, then click AA sequence &gt; Import AA sequence (Figure 2.3)\n\n\n\n\n\n\nFigure 2.3: Importing an AA sequence into Benchling\n\n\n\nClick “Import from database”, specify the Accession number (A0A0K8P6T7), Database (UniProt), and Project folder (the folder you just created), then click “Import” (Figure 2.4).\n\n\n\n\n\n\nFigure 2.4: Specifying the Uniprot accession to import\n\n\n\nYou should then be able to open the imported sequence and observe the amino acid sequence and its features (Figure 2.5).\n\n\n\n\n\n\nFigure 2.5: The PET hydrolase sequence imported into Benchling\n\n\n\n\nYou will now need to create a reverse translation of the amino acid sequence to derive the coding sequence necessary for its production.\n\nSelect the entire sequence, right click on it, and then then click on “Back translate”.\nSpecify the options to optimize your back translation: you wish to codon optimize for expression in Pseudomonas putida, and you should add EcoRI as a cut site to avoid (we will be using this site to cut the plasmid for our Gibson assembly reaction.) (Figure 2.6)\n\n\n\n\n\n\nFigure 2.6: Specifying options to reverse translate/back translate the PET hydrolase AA sequence\n\n\n\nClick “Preview optimization” when you are happy with the settings, and then “Save as new sequence”, making sure to save it in the correct Project folder.\n\nQuality check and modify the sequence as necessary:\n\nA. Select the entirety of the sequence, then click Create &gt; Translation &gt; Forward to examine the translation of your new nucleotide sequence (Figure 2.7).\n\n\n\n\n\n\nFigure 2.7: The PET hydrolase sequence in Benchling, with translation added\n\n\n\nIn this case, note that while there is a start codon present, there is no stop codon - we need to add one.\nRight click at the end of the sequence, then select “Insert bases” and add a stop codon (any of the 3 stop codons is fine).\n\n\n\n\n\n\nFigure 2.8: Adding a stop codon to the sequence\n\n\n\nB. You may also wish to add an RBS at the beginning of the sequence (it doesn’t look like there is one present in the vector that we’re using). You can do this using the same method (right click, “Insert bases”, add the desired bases. You could use for example RBS 33 from Aparicio et al 2020, which has been shown to give high expression in P. putida (https://doi.org/10.1016/j.isci.2020.100946) - TAAGGAGGTAAAAACATATG (RBS underlined, start in bold))\n\n\n\n\n\n\nFigure 2.9: Adding an RBS to the sequence\n\n\n\nC. You can double-check that this sequence is correct by confirming (e.g., using BLASTx) that it matches the I. sakaiensis PET hydrolase protein.\nThis is the sequence that you would then have synthesized (e.g., by GenScript or another DNA synthesis company) for use in your Gibson assembly reaction.\n\n\n2.1.3 Obtaining the sequence for the plasmid\nThe NCBI accession number for the plasmid we wish to use is KC544266. You can import this into Benchling by clicking the + icon, then clicking DNA/RNA sequence &gt; Import DNA RNA sequences.\n\n\n\n\n\n\nFigure 2.10: Importing a DNA sequence into Benchling\n\n\n\nIn the pop-up window, click “Import from database” and paste or type the accession number into the “Sequence” box, then click “Search”, and then “Import” (Figure 2.11).\n\n\n\n\n\n\nFigure 2.11: Specifying an NCBI accession number to import\n\n\n\nThis should give you the plasmid sequence for the plasmid (Figure 2.12). Note the constitutive promoter (Pc) that we want to use for our cloning project. There is a multiple cloning site (MCS) just downstream of it, which contains EcoRI, BclI, AflIII etc. sites … we have chosen above to use the EcoRI site (but note that we could have chosen any of the sites in the MCS).\n\n\n\n\n\n\nFigure 2.12: Plasmid map of the vector imported into Benchling\n\n\n\nYou can confirm the presence of the EcoRI site manually as well (click on the scissors icon in the right-hand menu and then search for “EcoRI” (Figure 2.13).\n\n\n\n\n\n\nFigure 2.13: Confirming the EcoRI site in your imported vector sequence\n\n\n\n\n\n2.1.4 In silico design of your Gibson Assembly\n\nClick on “Assembly” in the bottom right hand corner of your screen &gt; “Assembly Wizard”, and then in the pop-up window Pick Assembly Strategy, select “Gibson” (Figure 2.14).\n\n\n\n\n\n\n\nFigure 2.14: Choosing an Assembly Strategy\n\n\n\nThis should bring up a message encouraging you to try the new combinatorial assembly tool - click that link.\n\nIn the pop-up menu, add the name of your plasmid that you are aiming to create (Tip: choose something informative, e.g. pMMPc-PET), and be sure to specify the correct project folder.\n\nCheck the other specifications: you are assembling two fragments, to create a circular construct, and you will be producing fragments by “Digest with restriction enzyme”. The defualts for min/max length and min Tm of your binding regions are fine.\nWhen you are happy with the specifications, click “Save” (Figure 2.15)\n\n\n\n\n\n\nFigure 2.15: Specifying DNA assembly parameters\n\n\n\nYou should now get an assembly tool that allows you to specify the fragments you will use (Figure 2.16).\n\n\n\n\n\n\nFigure 2.16: Specifying the DNA fragments to use in your assembly\n\n\n\nFor BIN 1 (Backbone), click the + symbol &gt; Open sequences &gt; KC544266 (Figure 2.17)\n\n\n\n\n\n\nFigure 2.17: Adding the vector backbone\n\n\n\nSpecify the 5’ enzyme and 3’ enzyme you will use (EcoRI) and the EcoRI site on the map as the Start and End sites (by clicking on View: Plasmid map to see the EcoRI site if necessary) (Figure 2.18), then click “Add”.\n\n\n\n\n\n\nFigure 2.18: Specifying the vector start and end and enzyme details\n\n\n\nFor BIN 2 (Insert 1), change the method to “Add new overlaps using PCR” and then click the + sign to add your fragment &gt; Open sequences &gt; the name of your codon optimized sequence (Figure 2.19).\n\n\n\n\n\n\nFigure 2.19: Adding the insert to your assembly\n\n\n\nThis should bring up your correct fragment to insert (Figure 2.20). Click “add”.\n\n\n\n\n\n\nFigure 2.20: Adding the insert fragment\n\n\n\nClick “Autopopulate” in the “Constructs” box (Figure 2.21), and then “Assemble” in the top right hand corner”.\n\n\n\n\n\n\nFigure 2.21: Autopopulate the constructs in your assembly\n\n\n\nWork through the Assemble DNA menu, specifying the folder where you would like to save your constructs, fragments, and primers (Figure 2.22).\n\n\n\n\n\n\nFigure 2.22: Specifying the locations to save your constructs, fragments, and primers\n\n\n\nExamine your final construct (Figure 2.23) to verify the construct has placed your PET hydrolase gene in the correct orientation relative to the Pc promoter, and to see the sequences of the primers that you would need to order to carry out this Gibson assembly (Figure 2.24).\n\n\n\n\n\n\nFigure 2.23: Viewing your final construct\n\n\n\n\n\n\n\n\n\nFigure 2.24: Viewing the primers needed for your assembly",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PET hydrolase homolog cloning</span>"
    ]
  },
  {
    "objectID": "pkfA2RED.html",
    "href": "pkfA2RED.html",
    "title": "3  Deleting pkfA2 (lambda Red-based recombineering)",
    "section": "",
    "text": "3.1 Deleting pkfA2 using a lambda Red-based recombineering approach (“Redirect”)\nWe wish to delete the gene encoding a phosphofructokinase (pfkA2) from Streptomyces coelicolor A3(2), as previous work has shown that this deletion leads to increased production of certain antibiotics (Borodina et al 2008 - https://doi.org/10.1074/jbc.M803105200).\nThis document outlines the steps that are necessary to construct for deleting pkfA2 using the “Redirect” method of Gust et al (detailed protocol here): you should follow along with the design steps, e.g. in your Benchling account.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Deleting pkfA2 (lambda Red-based recombineering)</span>"
    ]
  },
  {
    "objectID": "pkfA2RED.html#deleting-pkfa2-using-a-lambda-red-based-recombineering-approach-redirect",
    "href": "pkfA2RED.html#deleting-pkfa2-using-a-lambda-red-based-recombineering-approach-redirect",
    "title": "3  Deleting pkfA2 (lambda Red-based recombineering)",
    "section": "",
    "text": "3.1.1 Design primers to amplify the apramycin resistance cassette with homologous regions to delete pkfA2\nWe will amplify the apramycin resistance cassette from one of the template plasmids (we will use pIJ773); with the PCR primers we design, we will add flanking sequences to the primers that allow us to target pkfA2 for deletion (Figure 3.1)\n\n\n\n\n\n\nFigure 3.1: Designing PCR primers for Streptomyces Redirect (image credit: Redirect manual)\n\n\n\n\nObtain the pfkA2 (SCO5426) sequence from StrepDB with 39 flanking nucleotides to either side:\n\nNavigate to StrepDB and search for pkfA2 (Figure 4.2)\n\n\n\n\n\n\nFigure 3.2: Searching for pkfA2 in StrepDB\n\n\n\nObtain the nucleotide sequence with 39 flanking nucleotides (Figure 3.3). You will want to copy this sequence over into Benchling.\n\n\n\n\n\n\nFigure 3.3: The pkfA2 nucleotide sequence, with 39 flanking nucleotides\n\n\n\n\nIn a new project (click the + symbol in the left-hand menu, then click Project, and give your project an informative name and description), add a new DNA sequence.\n\nDo this by clicking the + icon again, then clicking “DNA/RNA sequence”, and then clicking “New DNA/RNA sequence” (Figure 4.4)\n\n\n\n\n\n\nFigure 3.4: Designing PCR primers for Streptomyces Redirect (image credit: Redirect manual)\n\n\n\nSpecify the nucleotide type as “DNA”, the topology as “Linear”, and the project folder to your correct folder name, and then paste the sequence you obtained from StrepDB (pkfA2 with the 39 flanking nucleotides) into the box labelled “Bases” (You do not need to include the FASTA header). Then click the “Create” button.\nThis should load a window showing your pkfA2 sequence. You may find it useful, for downstream steps, to add the translation and annotation of the open reading frame. You can do this by selecting the sequence of the gene (remember that there should be 39 nucleotides either side - you want to select just the region from the start codon to the stop codon (inclusive)), as shown in Figure 3.5.\n\n\n\n\n\n\nFigure 3.5: Highlighting the pkfA2 coding sequence in Benchling\n\n\n\nClick: Create &gt; Translation &gt; Forward, give the translation an informative name (e.g., pkfA2), and click “Save” (Figure 3.6).\n\n\n\n\n\n\nFigure 3.6: The pkfA2 sequence with translation added in Benchling\n\n\n\nYou can now use this sequence to design your primers.\nThe upstream primer should be: upstream nucleotides (copy and paste the start codon + 39 nucleotides upstream of it) + the P1 sequence (from the Redirect manual) 5’ GGCTCACCGGTGTCAACAGCGAGCAGGAGACACAGCACGATG ATTCCGGGGATCCGTCGACC\nThe downstream primer should be: the reverse complement of the stop codon + 39 nucleotides downstream + the P2 sequence (from the Redirect manual).\nTo obtain the reverse complement, you can select the nucleotides (Figure 3.7), then right click on the selected region. Click “Copy special” &gt; “Reverse complement” and then click on the DNA reverse complement sequence to copy it (Figure 3.8). (You can, of course, use any other sensible method to obtain the reverse complement of your nucleotide sequence.)\n\n\n\n\n\n\nFigure 3.7: Highlighting the sequence for the pkfA2 deletion reverse primer\n\n\n\n\n\n\n\n\n\nFigure 3.8: Copying the reverse complement sequence for the pkfA2 deletion reverse primer\n\n\n\nreverse complement of TAGGCCTCCCCTCTAGGGGTGCCTCTCGACCGCCGTCCAGAA + P2 sequence\n–&gt; the final primer sequence should be 5’ TTCTGGACGGCGGTCGAGAGGCACCCCTAGAGGGGAGGCCTA TGTAGGCTGGAGCTGCTTC\nAmplify the pIJ773 cassette using these forward and reverse primers, then this can be used as a template for the recombineering (performed in an E. coli strain carrying the lambda red genes, and a cosmid carrying the pfkA2 gene (we know from StrepDB that this would be the St6A11 cosmid (as shown in the graphical gene map on the SCO5426 StrepDB page)).\nThe mutant cosmids will be transferred to our Streptomyces coelicolor strain via intrageneric conjugation (following the Redirect protocol), and we will select for recombinants (apramycin resistance) and screen for double-crossovers by PCR. (These PCR primers can be designed as you would any standard set of PCR primers: just a pair of primers to amplify the pkfA2 locus, and you will note a size difference in the PCR product based on the presence of the wild-type pkfA2 locus or the recombinant pkfA2::apra locus).[Of course, it is always advisable to perform further checks to confirm that your recombinant strain is correct; and for most standard genetic analyses, you would normally want to complement the recombinant strain as normal.]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Deleting pkfA2 (lambda Red-based recombineering)</span>"
    ]
  },
  {
    "objectID": "pkfA2Crispr.html",
    "href": "pkfA2Crispr.html",
    "title": "4  Deleting pkfA2 (using CRISPR)",
    "section": "",
    "text": "4.1 gRNA cloning\nWe wish to delete the gene encoding a phosphofructokinase (pfkA2) from Streptomyces coelicolor A3(2), as previous work has shown that this deletion leads to increased production of certain antibiotics (Borodina et al 2008 - https://doi.org/10.1074/jbc.M803105200).\nThis document outlines the necessary steps for designing a strategy to delete pkfA2 using the CRISPR method of Cobb et al 2015 (doi 10.1021/sb500351f), see detailed protocol from Actinobase: and also pCRISPomyces-1 and -2 Plasmid Assembly Protocol for more details on primer design.\nYou will need to 1) select and clone a guide RNA (gRNA) into pCRISPomyces-2, and 2) select and clone the regions flanking the gene that you wish to delete (pkfA2 into this plasmid).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deleting pkfA2 (using CRISPR)</span>"
    ]
  },
  {
    "objectID": "pkfA2Crispr.html#grna-cloning",
    "href": "pkfA2Crispr.html#grna-cloning",
    "title": "4  Deleting pkfA2 (using CRISPR)",
    "section": "",
    "text": "4.1.1 Import the pkfA2 sequence into Benchling so that you can work with it\nYou will first need to obtain the pkfA2 sequence and import it into Benchling. You will want the sequence of the gene itself, plus 1000 nucleotides either side (to design the flanking regions you will need later on).\n\nObtain the pfkA2 (SCO5426) sequence from StrepDB with 1000 flanking nucleotides to either side:\n\nNavigate to StrepDB and search for pkfA2 (Figure 4.2)\n\n\n\n\n\n\nFigure 4.2: Searching for pkfA2 in StrepDB\n\n\n\nObtain the nucleotide sequence with 1000 flanking nucleotides (Figure 4.3). You will want to copy this sequence over into Benchling.\n\n\n\n\n\n\nFigure 4.3: The pkfA2 sequence, with 1000 flanking nucleotides, in StrepDB\n\n\n\n\nIn a new project (click the + symbol in the left-hand menu, then click Project, and give your project an informative name and description), add a new DNA sequence.\n\nDo this by clicking the + icon again, then clicking “DNA/RNA sequence”, and then clicking “New DNA/RNA sequence” (Figure 4.4)\n\n\n\n\n\n\nFigure 4.4: Adding a new DNA/RNA sequence in Benchling\n\n\n\n\nIn your new pkfA2 sequence in Benchling, you will want to find and annotate the pkfA2 open reading frame (for your own convenience/ease of downstream steps).\n\nYou can do this by copying the blue portion of the sequence from StrepDB (Figure 4.3), and searching for it in your Benchling sequence (Ctrl+F, then paste in your copied sequence) - this should find the pkfA2 open reading frame (Figure 4.5).\n\n\n\n\n\n\nFigure 4.5: Highlighting the pkfA2 coding sequence in Benchling\n\n\n\nHighlight this sequence, and then (you will have to close the search menu), click “Create” &gt; “Translation” &gt; “Forward”.\nName your translation (e.g., pkfA2) and then click “Save”. The amino acid translation of pkfA2 should appear below the sequence (Figure 4.6).\n\n\n\n\n\n\nFigure 4.6: The pkfA2 sequence, with translation added, in Benchling\n\n\n\n\n\n4.1.2 Select a guide RNA sequence\nYou want to select a guide sequence according to the following part of the pCRISPomyces-1 and 2 plasmid assembly protocol:\n\nSelect a 20 nt protospacer of interest. The 3’ protospacer adjacent sequence (PAM) must be NGG, where N is any nucleotide. Preference is given to:\n\n\nsequences with purines occupying the last four (3’) bases of the protospacer.\nsequences on the non-coding strand.\nsequences in which the last 12 nt of protospacer + 3 nt PAM (15 nt total) are unique in the genome (check by BLAST with all four possible NGG sequences).\n\nLooking at the sequence, we can see several potential protospacers, e.g. the one highlighted in Figure 4.7 (upstream of a CGG PAM motif)\n\n\n\n\n\n\nFigure 4.7: The pkfA2 sequence, with a potential PAM motif highlighted, in Benchling\n\n\n\nYou would, of course, need to check whether this protospacer is specific enough, following the checks outlined above.\nOnce you are satisfied that you have identified a protospacer that you can use, right click on it, and then select “Create primer” &gt; “Forward”.\nFollowing the protocol, we need to add a sticky end onto the primer (5’-ACGC). Copy or type those 4 nucleotides at the 5’ end of your primer, and then adjust the overhang (4 bp) as shown in Figure 4.8.\n\n\n\n\n\n\nFigure 4.8: Creating the pkfA2 gRNA forward primer\n\n\n\nGive your primer a sensible name and be sure to save it in the correct Project folder.\nRepeat this process for the reverse primer, noting that in this instance the 5’ sticky overhang sequence should be 5’-AAAC (Figure 4.9)\n\n\n\n\n\n\nFigure 4.9: Creating the pkfA2 gRNA reverse primer\n\n\n\nTo create your gRNA construct, you would then order these oligos synthesized, anneal them, and insert them into your pCrispomyces2 vector using Golden Gate assembly.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deleting pkfA2 (using CRISPR)</span>"
    ]
  },
  {
    "objectID": "pkfA2Crispr.html#repair-template-construction",
    "href": "pkfA2Crispr.html#repair-template-construction",
    "title": "4  Deleting pkfA2 (using CRISPR)",
    "section": "4.2 Repair template construction",
    "text": "4.2 Repair template construction\nYou will also want to create a repair template (which the cells will use to repair the dsDNA break introduced by Cas9 at the site targeted by your gRNA). You can do this using Gibson assembly.\n\n4.2.1 Import the pCrispomyces-2 plasmid sequence from Addgene\n\nGo to the Addgene website and search for the pCrispomyces-2 plasmid. You should find it as Plasmid #61737. Copy the URL to this page (https://www.addgene.org/61737/).\nIn Benchling, click the + icon in the left-hand bar, and then click “DNA/RNA sequence” &gt; “Import DNA/RNA sequence”.\nIn the pop-up window, click “Import from database” and paste your addgene url into the “Sequence” field (Figure 4.10). click “Search”, and then “Import”. This should import the pCRISPomyces-2 plasmid into your Benchling account (be sure to save it to your correct folder).\n\n\n\n\n\n\n\nFigure 4.10: Importing the pCrispomyces-2 sequence from Addgene into Benchling\n\n\n\nYou should be able to view the map of the plasmid you imported (Figure 4.11).\n\n\n\n\n\n\nFigure 4.11: The imported pCrispomyces-2 plasmid map\n\n\n\n\n\n4.2.2 Assemble pCrispomyces-2 with the flanking 1000 nucleotides up- and down- stream of pkfA2\n\nIn the bottom right hand corner, click “Assembly” &gt; “Assembly wizard”, then select “Gibson” and click on the “try the new combinatorial assembly tool here” link.\nIn the “Assemble DNA” pop-up window, give your new construct a sensible name and make sure you are saving it in the correct Project folder. Then, make sure that you are specifying the correct parameters for your construct: 3 fragment bins, Circular topology, Add never overlaps using PCR - then click “Save”. (Figure 4.12)\n\n\n\n\n\n\n\nFigure 4.12: Using the Benchling Assembly Wizard\n\n\n\n\nFor BIN 1/Backbone, select “Digest with restriction enzyme” and then click the + symbol &gt; “Open sequence” &gt; select your pCrispomyces-2 plasmid (Figure 4.13).\n\n\n\n\n\n\n\nFigure 4.13: Adding pCrispomyces-2 to BIN 1 in your assembly\n\n\n\nSpecify the 5’ enzyme and 3’ enzyme (XbaI for both) and select the Start and End sites at the XbaI cut sites (ensure that you have selected the entire plasmid, 11.0 kb out of 11.0 kb, as shown in Figure 4.14)\n\n\n\n\n\n\nFigure 4.14: Selecting the pCrispomyces-2 backbone for your plasmid assembly\n\n\n\nClick “Add”.\n\nFor BIN 2/Insert 1, add the 1000 nucleotides upstream of pkfA2 as follows:\n\nEnsure that “Add new overlaps using PCR is selected”, then click the + symbol &gt; open sequences &gt; select your pkfA2 file.\nSelect, in the sequence that pops up, the nucleotides up until the ATG start codon (or type 1 and 1000 into the Start and End fields, respectively), as shown in Figure 4.15 - then click the Add button.\n\n\n\n\n\n\nFigure 4.15: Selecting the 1000 nucleotides upstream of the pkfA2 coding sequence\n\n\n\n\nFor BIN 3/Insert 2, do the same, but select the 1000 nucleotides downstream of pkfA2.\nCheck in the “Fragments” field that your 3 fragments have been added correctly and that their status is “Looks good” (Figure 4.16) - then click “Autopopulate” in the “Constructs” field.\n\n\n\n\n\n\n\nFigure 4.16: Checking the status of your fragments in your Benchling assembly\n\n\n\nCheck the construct that this assembles, and then click “Assemble” (top right-hand corner of the page).\nIn the “Assemble DNA” field that pops up, save your constructs, fragments, and primers to the correct location (Figure 4.17), then click “Assemble”.\n\n\n\n\n\n\nFigure 4.17: Saving your DNA assembly components in Benchling\n\n\n\nThis should produce your final construct (click to open a larger view, as seen in Figure 4.18).\n\n\n\n\n\n\nFigure 4.18: Map of your assembled construct\n\n\n\nIf you click on “Primers”, you will see the primers that you would need to order, to amplify the pkfA2 flanking regions by PCR for this Gibson assembly (Figure 4.19).\n\n\n\n\n\n\nFigure 4.19: Primers needed for your Gibson assembly reaction\n\n\n\nAfter the Gibson assembly, you would confirm that the construct you generated is correct; then introduce it into desired Streptomyces strain by intrageneric conjugation; then screen exconjugants for pkfA2 deletion by PCR.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deleting pkfA2 (using CRISPR)</span>"
    ]
  }
]